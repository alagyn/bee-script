type 
    = type OPEN_SQUARE LIT_INT CLOSE_SQUARE
    {
        auto out = std::make_shared<TypeNode>();
        out->primType = PrimitiveType::Array;
        out->size = std::stoi($LIT_INT);
        out->subtype = std::static_pointer_cast<TypeNode>($type);
        return out;
    }
    | type OPEN_SQUARE CLOSE_SQUARE
    {
        auto out = std::make_shared<TypeNode>();
        out->primType = PrimitiveType::Array;
        out->size = 0;
        out->subtype = std::static_pointer_cast<TypeNode>($type);
        return out;
    }
    | type_name
    ;

type_name
    = TYPE_INT
    {
        auto out = std::make_shared<TypeNode>();
        out->primType = PrimitiveType::Int;
        return out;
    }
    | TYPE_STR
    {
        auto out = std::make_shared<TypeNode>();
        out->primType = PrimitiveType::Str;
        return out;
    }
    | TYPE_BOOL
    {
        auto out = std::make_shared<TypeNode>();
        out->primType = PrimitiveType::Bool;
        return out;
    }
    | TYPE_VOID
    {
        auto out = std::make_shared<TypeNode>();
        out->primType = PrimitiveType::Void;
        return out;
    }
    | TYPE_BYTE
    {
        auto out = std::make_shared<TypeNode>();
        out->primType = PrimitiveType::Byte;
        return out;
    }
    ;
